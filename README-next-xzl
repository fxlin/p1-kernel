roadmap... 
exp7: 
    sync (spinlock, sleeplock) & corresponding sched support (sleep, etc.)
    more syscalls
    more vm functions. copyin, copyout

block layer, buf, vfs, filesys, disk driver (so that we can have basicaly fs tree working)
    disk driver woulnd't be necessary but it's tightly coupled with vfs at this time. 

console, uart (improved)
    b/c user now needs to call sys_write() to console. uart driver needs to support multithreading
        also irq driven

NEXT -- improved uart driver, then enable console. 

NEXT --- fixe bug. cf sysfile.c 293 V

NEXT --- deeper issues in fs. most related to fs/blk/cache/lock not init'd 
    fixed a bug in printf (long)

thought -- userspace printf() (write()) tightly coupled with vfs, fs, and block device driver. 
    need to provide an easier way to debug. 


TODO for mm: in the long run, maybe need a function for unmapping/freeing a user va 
region, the problme is that mm->user_pages are stord in an array, therefore 
unmapping/freeing will leave holes there, which complicate things. 

do we really need mm->user_pages? if we need to free them, 
    we can follow mm->pgd to find all user pages


TODO: 
enable disk driver irq (right now not gettting irq?)
inode for "/" must exists on disk... 
    (it was created in memory, but invalid, meaning not loaded from disk)
    first time the root inode gets ilocked(), it will try to read from disk ... no irq, dead.
    fix this 
FIXED 

fsinit() must be called. <---- V

------------
HOW TO BUILD DISK IMAGE... 
xl6yq@granger1 (riscv)[xv6-riscv]$ mkfs/mkfs /tmp/sd.bin README
nmeta 46 (boot, super, log blocks 30 inode blocks 13, bitmap blocks 1) blocks 1954 total 2000
balloc: first 50 blocks have been allocated
balloc: write bitmap block at sector 45

"README" is a file
-------------
V: fork() should also clone opened fd? 
V only 1 user task printing coudl be the other does not have a valid fd (always spinning then ...)

TODO: test exec() ... with standalone user app   v

call_sys_write(1 /*stdout*/, msg, strlen(msg));     // WILL FAIL. can be used for debugging 
----> use this as a test case ... to improve expcetion handling... userspace unwinding, etc. 

[ ] ramdisk ... 
convert to c header; 
or use linker to include binary image (just like how we link font   and pic)
    shall we include a zip fuction?

==== THOUGHTS ====
by using ramdisk, the actual disk driver (irq driven) can come in much later. 

hence, less concurrncy issus in fs, easier to debug other parts of the OS (scheduling etc)

uart driver ... should maintaina trivial version (in addition to the full fledged one that can support console). easier to debug 
    * no spinlock, 
    * no "wakeup" 
    * no tx irq 
    can be invoked from a "debug" syscall (instead of as console dev file)... also simplify things 


[x] TODO: exec() cannot parse arguments correctly... argc always 0. fix it. 


[x] after some changes, task1 was waiting for blockio but didnt get woken up??
check: if driver's irq called wakeup() and why it is not changing task1's state
to RUNNABLE
(still WAITING)

1st standalone user program -- "echo" -- will test exec() and arg passing. 
"ls" -- will test more fs functions
"mkdir" then "ls"

[x] forktest (the basis of shell, cannot always call exec() from kernel 
and change the arguments
    for which sys_wait() must be implemented; sys_exit() also shall improve.
        ZOMBIE state....

[x] reivew code sbrk.. make p->sz p->codesz not have to be page aligned. 
sbrk: make sure no additiona pages are allocate freed...

[x] alloc_user_pages ... implement logic to "bail out" and reserve page allocation

-------------
exp9 more efficient VM impl. overhaul tcb ds for userpages (va and pa)
    dont track each page, just a range. otherwise we cannot scale to large user task

[x]  get kill() works, which reuirese to modify syacall path entry/exit kernel. 
    has to write asm

[?] -O2 exec() will fail. user.c problem. cannot control link-relative addr
    impl an assembly launcher ...   
    USE A TEMP SOLUTION --- use -O0 only for user. c

[x] improve demand paging, do_mem_abort only for user va range 
    sbrkfail passed


-------------
stack unwind ref:
https://elixir.bootlin.com/linux/latest/source/arch/arm64/kernel/stacktrace.c
libunwind ... too heavy 
rt-thread os... no unwind for armv8, only v7
circle ... no unwind, only gdb stub support 

---------------

source files replaced

include/mm.h
src/linker-qemu.d

src/mini_uart.c (removed)

added
src/pl011.c

